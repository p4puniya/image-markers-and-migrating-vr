Index: src/processing/mode/android/Manifest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */\n\n/*\n Part of the Processing project - http://processing.org\n\n Copyright (c) 2012-21 The Processing Foundation\n Copyright (c) 2010-12 Ben Fry and Casey Reas\n\n This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License version 2\n as published by the Free Software Foundation.\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this program; if not, write to the Free Software Foundation,\n Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\npackage processing.mode.android;\n\nimport org.xml.sax.SAXException;\nimport processing.app.Messages;\nimport processing.app.Sketch;\nimport processing.core.PApplet;\nimport processing.data.XML;\n\nimport javax.xml.parsers.ParserConfigurationException;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.HashMap;\n\n/**\n * Class encapsulating the manifest file associated with a Processing sketch\n * in the Android mode.\n *\n */\npublic class Manifest {\n  static final String MANIFEST_XML = \"AndroidManifest.xml\";\n\n  static final String MANIFEST_ERROR_TITLE = \"Error handling \" + MANIFEST_XML;\n  static final String MANIFEST_ERROR_MESSAGE =\n    \"Errors occurred while reading or writing \" + MANIFEST_XML + \",\\n\" +\n    \"which means lots of things are likely to stop working properly.\\n\" +\n    \"To prevent losing any data, it's recommended that you use “Save As”\\n\" +\n    \"to save a separate copy of your sketch, and then restart Processing.\";\n  \n  static private final String[] MANIFEST_TEMPLATE = {\n    \"AppManifest.xml.tmpl\",\n    \"WallpaperManifest.xml.tmpl\",\n    \"WatchFaceManifest.xml.tmpl\",\n    \"VRManifest.xml.tmpl\",\n    \"ARManifest.xml.tmpl\"\n  };\n  \n  // Default base package name, user need to change when exporting package. \n  static final String BASE_PACKAGE = \"processing.test\";  \n  \n  static final String PERMISSION_PREFIX = \"android.permission.\";  \n  \n  private Sketch sketch;  \n  private int appComp;  \n  private File modeFolder;\n\n  /** the manifest data read from the file */\n  private XML xml;\n\n\n  public Manifest(Sketch sketch, int appComp, File modeFolder, boolean forceNew) {\n    this.sketch = sketch;\n    this.appComp = appComp;\n    this.modeFolder = modeFolder;\n    load(forceNew);\n  }\n\n\n  private String defaultPackageName() {\n    return BASE_PACKAGE + \".\" + sketch.getName().toLowerCase();\n  }\n\n  \n  private String defaultVersionCode() {\n    return \"1\";\n  }\n\n  \n  private String defaultVersionName() {\n    return \"1.0\";\n  }\n  \n\n  // called by other classes who want an actual package name\n  // internally, we'll figure this out ourselves whether it's filled or not\n  public String getPackageName() {\n    String pkg = xml.getString(\"package\");\n    return pkg.length() == 0 ? defaultPackageName() : pkg;\n  }\n\n\n  public String getVersionCode() {\n    String code = xml.getString(\"android:versionCode\");\n    return code.length() == 0 ? defaultVersionCode() : code;\n  }\n  \n  \n  public String getVersionName() {\n    String name = xml.getString(\"android:versionName\");\n    return name.length() == 0 ? defaultVersionName() : name;\n  }\n  \n  \n  public void setPackageName(String packageName) {\n    xml.setString(\"package\", packageName);\n    save();\n  }\n\n\n  public String[] getPermissions() {\n    XML[] elements = xml.getChildren(\"uses-permission\");\n    int count = elements.length;\n    String[] names = new String[count];\n    for (int i = 0; i < count; i++) {\n      String tmp = elements[i].getString(\"android:name\");\n      if (tmp.indexOf(\"android.permission\") == 0) {\n        // Standard permission, remove prefix\n        int idx = tmp.lastIndexOf(\".\");\n        names[i] = tmp.substring(idx + 1);        \n      } else {\n        // Non-standard permission (for example, wearables)\n        // Store entire name.\n        names[i] = tmp;\n      }\n    }\n    return names;\n  }\n\n\n  public void setPermissions(String[] names) {\n    boolean hasWakeLock = false;\n    boolean hasVibrate = false;\n    boolean hasReadExtStorage = false;\n    boolean hasCameraAccess = false;\n    \n    // Remove all the old permissions...\n    for (XML kid : xml.getChildren(\"uses-permission\")) {\n      String name = kid.getString(\"android:name\");\n      \n      // ...except the ones for watch faces and VR apps.   \n      if (appComp == AndroidBuild.WATCHFACE && name.equals(PERMISSION_PREFIX + \"WAKE_LOCK\")) {\n        hasWakeLock = true;\n        continue;\n      }\n      if (appComp == AndroidBuild.VR && name.equals(PERMISSION_PREFIX + \"VIBRATE\")) {\n        hasVibrate = true;\n        continue;\n      }\n      if (appComp == AndroidBuild.VR && name.equals(PERMISSION_PREFIX + \"READ_EXTERNAL_STORAGE\")) {\n        hasReadExtStorage = true;\n        continue;\n      }\n      if (appComp == AndroidBuild.AR && name.equals(PERMISSION_PREFIX + \"CAMERA\")) {\n        hasCameraAccess = true;\n        continue;\n      }\n      \n      // Don't remove non-standard permissions, such as\n      // com.google.android.wearable.permission.RECEIVE_COMPLICATION_DATA\n      // because these are set manually by the user.\n      if (-1 < name.indexOf(\"com.google.android\")) continue;\n      xml.removeChild(kid);\n    }\n    \n    // ...and add the new permissions back\n    for (String name : names) {\n      \n      // Don't add required permissions for watch faces and VR again...\n      if (appComp == AndroidBuild.WATCHFACE && name.equals(\"WAKE_LOCK\")) continue;\n      if (appComp == AndroidBuild.VR && name.equals(\"VIBRATE\")) continue;\n      if (appComp == AndroidBuild.VR && name.equals(\"READ_EXTERNAL_STORAGE\")) continue;\n      if (appComp == AndroidBuild.AR && name.equals(PERMISSION_PREFIX + \"CAMERA\")) continue;\n         \n      XML newbie = xml.addChild(\"uses-permission\");\n      if (-1 < name.indexOf(\".\")) {\n        // Permission string contains path\n        newbie.setString(\"android:name\", name);\n      } else {\n        newbie.setString(\"android:name\", PERMISSION_PREFIX + name);\n      }\n    }\n\n    // ...unless they were initially missing.\n    if (appComp == AndroidBuild.WATCHFACE && !hasWakeLock) {\n      xml.addChild(\"uses-permission\").\n          setString(\"android:name\", PERMISSION_PREFIX + \"WAKE_LOCK\");\n    }\n    if (appComp == AndroidBuild.VR && !hasVibrate) {\n      xml.addChild(\"uses-permission\").\n          setString(\"android:name\", PERMISSION_PREFIX + \"VIBRATE\");      \n    }\n    if (appComp == AndroidBuild.VR && !hasReadExtStorage) {\n      xml.addChild(\"uses-permission\").\n          setString(\"android:name\", PERMISSION_PREFIX + \"READ_EXTERNAL_STORAGE\");       \n    }\n    if (appComp == AndroidBuild.AR && !hasCameraAccess) {\n      xml.addChild(\"uses-permission\").\n              setString(\"android:name\", PERMISSION_PREFIX + \"CAMERA\");\n    }\n    \n    save();\n  }\n\n  \n  private void fixPermissions(XML mf) {\n    boolean hasWakeLock = false;\n    boolean hasVibrate = false;\n    boolean hasReadExtStorage = false;\n    boolean hasCameraAccess = false;\n    for (XML kid : mf.getChildren(\"uses-permission\")) {\n      String name = kid.getString(\"android:name\");\n      if (appComp == AndroidBuild.WATCHFACE && name.equals(PERMISSION_PREFIX + \"WAKE_LOCK\")) {\n        hasWakeLock = true;\n        continue;\n      }\n      if (appComp == AndroidBuild.VR && name.equals(PERMISSION_PREFIX + \"VIBRATE\")) {\n        hasVibrate = true;\n        continue;\n      }\n      if (appComp == AndroidBuild.VR && name.equals(PERMISSION_PREFIX + \"READ_EXTERNAL_STORAGE\")) {\n        hasReadExtStorage = true;\n        continue;\n      }\n      if (appComp == AndroidBuild.AR && name.equals(PERMISSION_PREFIX + \"CAMERA\")) {\n        hasCameraAccess = true;\n        continue;\n      }\n\n      if (appComp == AndroidBuild.AR && !hasCameraAccess) {\n        mf.addChild(\"uses-permission\").\n                setString(\"android:name\", PERMISSION_PREFIX + \"CAMERA\");\n      }\n    }\n    if (appComp == AndroidBuild.WATCHFACE && !hasWakeLock) {\n      mf.addChild(\"uses-permission\").\n         setString(\"android:name\", PERMISSION_PREFIX + \"WAKE_LOCK\");\n    }\n    if (appComp == AndroidBuild.VR && !hasVibrate) {\n      mf.addChild(\"uses-permission\").\n         setString(\"android:name\", PERMISSION_PREFIX + \"VIBRATE\");      \n    }\n    if (appComp == AndroidBuild.VR && !hasReadExtStorage) {\n      mf.addChild(\"uses-permission\").\n         setString(\"android:name\", PERMISSION_PREFIX + \"READ_EXTERNAL_STORAGE\");       \n    }    \n  }\n  \n\n  private void writeBlankManifest(final File xmlFile, final int appComp) {\n    File xmlTemplate = new File(modeFolder, \"templates/\" + MANIFEST_TEMPLATE[appComp]);    \n    HashMap<String, String> replaceMap = new HashMap<String, String>();    \n    AndroidUtil.createFileFromTemplate(xmlTemplate, xmlFile, replaceMap);\n  }\n\n\n  /**\n   * Save a new version of the manifest info to the build location.\n   * Also fill in any missing attributes that aren't yet set properly.\n   */\n  protected void writeCopy(File file, String className) throws IOException {\n    // write a copy to the build location\n    save(file);\n\n    // load the copy from the build location and start messing with it\n    XML mf = null;\n    try {\n      mf = new XML(file);\n\n      // package name, or default\n      String p = mf.getString(\"package\").trim();\n      if (p.length() == 0) {\n        mf.setString(\"package\", defaultPackageName());\n      }\n\n      // app name and label, or the class name\n      XML app = mf.getChild(\"application\");\n      String label = app.getString(\"android:label\");\n      if (label.length() == 0) {\n        app.setString(\"android:label\", className);\n      }      \n      \n      // Services need the label also in the service section\n      if (appComp == AndroidBuild.WALLPAPER || appComp == AndroidBuild.WATCHFACE) {\n        XML serv = app.getChild(\"service\");\n        label = serv.getString(\"android:label\");\n        if (label.length() == 0) {\n          serv.setString(\"android:label\", className);\n        }       \n      }\n      \n      // Make sure that the required permissions for watch faces, AR and VR apps are\n      // included. \n      if (appComp == AndroidBuild.WATCHFACE || appComp == AndroidBuild.VR|| appComp == AndroidBuild.AR) {\n        fixPermissions(mf);\n      }\n\n      PrintWriter writer = PApplet.createWriter(file);\n      writer.print(mf.format(4));\n      writer.flush();\n      writer.close();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n\n  protected void load(boolean forceNew) { \n    File manifestFile = getManifestFile();\n    if (manifestFile.exists()) {\n      try {\n        xml = new XML(manifestFile);\n\n        boolean saveOld = false;\n\n        XML app = xml.getChild(\"application\");\n        String icon = app.getString(\"android:icon\");\n        if (icon.equals(\"@drawable/icon\")) {\n          // Manifest file generated with older version of the mode, replace icon and save\n          app.setString(\"android:icon\", \"@mipmap/ic_launcher\");\n          saveOld = true;\n        }\n\n        XML activity = app.getChild(\"activity\");\n        XML service = app.getChild(\"service\");\n        if (activity != null && activity.getString(\"android:name\").equals(\".MainActivity\")) {\n          addExportedAttrib(activity);\n          saveOld = true;\n        }\n        if (service != null && service.getString(\"android:name\").equals(\".MainService\")) {\n          addExportedAttrib(service);\n          saveOld = true;\n        }\n\n        XML usesSDK = xml.getChild(\"uses-sdk\");\n        if (usesSDK != null) {\n          // Manifest file generated with older version of the mode, uses-sdk is no longer needed in manifest\n          xml.removeChild(usesSDK);\n          saveOld = true;\n        }\n\n        if (saveOld && !forceNew) save();\n\n      } catch (Exception e) {\n        e.printStackTrace();\n        System.err.println(\"Problem reading AndroidManifest.xml, creating a new version\");\n\n        // remove the old manifest file, rename it with date stamp\n        long lastModified = manifestFile.lastModified();\n        String stamp = AndroidMode.getDateStamp(lastModified);\n        File dest = new File(sketch.getFolder(), MANIFEST_XML + \".\" + stamp);\n        boolean moved = manifestFile.renameTo(dest);\n        if (!moved) {\n          System.err.println(\"Could not move/rename \" + manifestFile.getAbsolutePath());\n          System.err.println(\"You'll have to move or remove it before continuing.\");\n          return;\n        }\n      }\n    }\n    \n    String[] permissionNames = null;\n    String pkgName = null;\n    String versionCode = null;\n    String versionName = null;\n    if (xml != null && forceNew) {\n      permissionNames = getPermissions();\n      pkgName = getPackageName();\n      versionCode = getVersionCode();\n      versionName = getVersionName();\n      xml = null;\n    }\n\n    if (xml == null) {\n      writeBlankManifest(manifestFile, appComp);\n      try {\n        xml = new XML(manifestFile);\n        if (permissionNames != null) {\n          setPermissions(permissionNames);\n        }\n        if (pkgName != null) {\n          xml.setString(\"package\", pkgName);\n        }\n        if (versionCode != null) {\n          xml.setString(\"android:versionCode\", versionCode);\n        }\n        if (versionName != null) {\n          xml.setString(\"android:versionName\", versionName);\n        }       \n      } catch (FileNotFoundException e) {\n        System.err.println(\"Could not read \" + manifestFile.getAbsolutePath());\n        e.printStackTrace();\n      } catch (IOException e) {\n        e.printStackTrace();\n      } catch (ParserConfigurationException e) {\n        e.printStackTrace();\n      } catch (SAXException e) {\n        e.printStackTrace();\n      }\n    }\n    if (xml == null) {\n      Messages.showWarning(AndroidMode.getTextString(\"manifest.warn.cannot_handle_file_title\", MANIFEST_XML), \n                           AndroidMode.getTextString(\"manifest.warn.cannot_handle_file_body\", MANIFEST_XML));\n    }\n  }\n\n  protected void addExportedAttrib(XML child) {\n    if (!child.hasAttribute(\"android:exported\")) {\n      // Manifest file generated with older version of the mode, missing android:exported attributed\n      child.setString(\"android:exported\", \"true\");\n    }\n  }\n\n  protected void save() {\n    save(getManifestFile());\n  }\n\n\n  /**\n   * Save to the sketch folder, so that it can be copied in later.\n   */\n  protected void save(File file) {\n    PrintWriter writer = PApplet.createWriter(file);\n//    xml.write(writer);\n    writer.print(xml.format(4));\n    writer.flush();\n    writer.close();\n  }\n\n\n  private File getManifestFile() {\n    return new File(sketch.getFolder(), MANIFEST_XML);\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/processing/mode/android/Manifest.java b/src/processing/mode/android/Manifest.java
--- a/src/processing/mode/android/Manifest.java	(revision f42cf8c992e70120191ddd076b0917fd077c9cd4)
+++ b/src/processing/mode/android/Manifest.java	(date 1695966908259)
@@ -146,7 +146,7 @@
     boolean hasVibrate = false;
     boolean hasReadExtStorage = false;
     boolean hasCameraAccess = false;
-    
+
     // Remove all the old permissions...
     for (XML kid : xml.getChildren("uses-permission")) {
       String name = kid.getString("android:name");
@@ -168,7 +168,7 @@
         hasCameraAccess = true;
         continue;
       }
-      
+
       // Don't remove non-standard permissions, such as
       // com.google.android.wearable.permission.RECEIVE_COMPLICATION_DATA
       // because these are set manually by the user.
@@ -184,7 +184,7 @@
       if (appComp == AndroidBuild.VR && name.equals("VIBRATE")) continue;
       if (appComp == AndroidBuild.VR && name.equals("READ_EXTERNAL_STORAGE")) continue;
       if (appComp == AndroidBuild.AR && name.equals(PERMISSION_PREFIX + "CAMERA")) continue;
-         
+
       XML newbie = xml.addChild("uses-permission");
       if (-1 < name.indexOf(".")) {
         // Permission string contains path
@@ -255,8 +255,8 @@
     }
     if (appComp == AndroidBuild.VR && !hasReadExtStorage) {
       mf.addChild("uses-permission").
-         setString("android:name", PERMISSION_PREFIX + "READ_EXTERNAL_STORAGE");       
-    }    
+         setString("android:name", PERMISSION_PREFIX + "READ_EXTERNAL_STORAGE");
+    }
   }
   
 
